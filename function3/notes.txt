function ---> inner function --->  function variables and scope-- ananymous or nameless or lambda  function 
then we discuss decortor  and generator-->recursive function  --> means -- calling itself   



what is ananymous function

ananymous function/nameless function:
=========================================
 what is the use of name less or  ananymous function 
 instance use only 
  what is the use of instance use 

  in python we have inbuilt function are there 


these three functions excepting  one function as a 

  map() map excepting one function and  one iterator 
reduce() from function tool-->  reduce also ecxepting one function  and one iterator 
filter()-->  filter also excepting one function  and one iterator 


 what  is the need of ananymous function 
 how to create ananymous function in python  using lambda
 the main purpose of ananymous function is  just for instance use 
ex:

def add (q,b):
print (q+b)
add()



no function name  and no function def keyword  and no return statement
ex:

def add (q,b):
print (q+b)
add()

ex:
add= lambda a,b:a+b
add(10,20)



what is ananymous function  --> no function name  and no function def keyword  and no return statement


 then what we have to write here--> we are going to use lambda

  what is lambda=---->no function name  and no function def keyword  and no return statement


  syntax of lambda:
  ======================
   lambda arguments  and return expression
   to execute this lambda we are assigning to variable--> we can use any  name
   and we can invoke using variable   
#  we must assign variable for lamda  and print 


    add=lambda a,b:a+b
    print (add(1,2))


 what is the advantage of lambda function----> for instance use 

 advantage of lambda :
 instant use 
 consice code ---> we are going to write very less code 

 by using lambda  we can write short code
 improveing code readability.
    

    ex :
    def calc_age:
    return 2023-year
    print (calc_age(2005))



========================================================
 map(),filter(),reduce()

what is map function
map is a inbuilt function 


map except one function and iterator

map (1,2)
-- first argument is function 
-- second argument is  iterable object 
--   are we can say it is a sequence only 


-- map function execute  the function  for every element present in the sequence 
-- for every element present in the  present in the given sequence  apply some functionality and return the new element
--   
=========================================
 withoutlambda:

 # marks=[1,2,3,33,44,55]  # sequence 
# def add (mark):  # function 
#     return mark+1
# # print(add(2))
# map_obj=map(add,marks) # now we are  getting map object
# new_marks=list(map_obj)

# print(marks)
# print(new_marks)

==================================================


with lambda:
 for every element present in the  sequence apply some functionality  and generate new element  
#  map function return one map object convert into list type 



# marks=[1,2,3,4,5,6,7]
# print(marks)
# print(list(map(lambda mark:mark+1,marks)))

==============================================
these are exceptiong one function and sequence 
map()--> for every element we are return  new element go with the map  only  
 map()--->for  every element  we are excepting  some new value that case we are going to use map  
 filter()--> if we are excepting always some boolean results
 filter()----> to filter your data result is boolean result then we go  with the  filter    
 to filter the values from the given sequence  we are going to use filter 
 reduce()---> it can reduce single element 

=================================================================
 reduce function 

 reduce() - reduce sequence of elements into a single elements 
reduce(function, sequence)





